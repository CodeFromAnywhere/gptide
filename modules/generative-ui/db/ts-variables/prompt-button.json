{
  "createdAt": 1671317390164,
  "updatedAt": 1671317390164,
  "deletedAt": 0,
  "createdFirstAt": 1671317390164,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "PromptButton",
  "slug": "prompt-button",
  "operationRelativeTypescriptFilePath": "src/components/PromptButton.tsx",
  "type": {
    "rawType": "(props: { item: import(\"/Users/king/King/operations/tools/ai/ai-types/build/ContextualPrompt\").ContextualPrompt; markdown?: string | null | undefined; projectRelativeFilePath?: string | undefined; }) => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(props: {\n  item: ContextualPrompt;\n  markdown?: string | null;\n  projectRelativeFilePath?: string;\n}) => {\n  const { item, markdown, projectRelativeFilePath } = props;\n  const admin = useAdmin();\n  const router = useRouter();\n  const showPromptAlert = usePromptResultAlert();\n  const alert = useAlert();\n  const title = `${item.isFavorite ? \"‚≠êÔ∏è \" : \"\"}${item.title || item.name}`;\n\n  return (\n    <Tooltip\n      hoverTimeout={100}\n      tooltip={\n        admin.isAdminActive ? (\n          <Div>\n            <P>{title}</P>\n            {item.description ? (\n              <MarkdownContent content={item.description} config={{}} />\n            ) : null}\n            <ClickableIcon\n              emoji=\"üóë Delete\"\n              onClick={async () => {\n                // delete prompt\n                const apiResult = await api.deleteDbModel(\n                  \"ContextualPrompt\",\n                  item.id\n                );\n\n                showStandardResponse(apiResult);\n\n                if (apiResult?.result?.isSuccesful) {\n                  admin.refetch?.();\n                }\n              }}\n            />\n            <ClickableIcon\n              emoji=\"‚úèÔ∏è Edit\"\n              onClick={() => {\n                // go to upsert ContextualPrompt db page.\n                router.push(`/edit/ContextualPrompt?id=${item.id}`);\n              }}\n            />\n\n            <ClickableIcon\n              emoji=\"üí• Apply on folder\"\n              onClick={() => {\n                alert?.(\n                  \"Apply on folder\",\n                  `You're going to apply the prompt ${item.name} on this whole folder. Are you sure?`,\n                  [\n                    { style: \"cancel\", text: \"cancel\" },\n                    {\n                      style: \"default\",\n                      text: \"Yes\",\n                      onPress: () => {\n                        warningToast(\"Not implemented yet. Coming soon\");\n                      },\n                    },\n                    {\n                      style: \"destructive\",\n                      text: \"Yes, recursive\",\n                      onPress: () => {\n                        warningToast(\"Not implemented yet. Coming soon\");\n                      },\n                    },\n                  ]\n                );\n              }}\n            />\n          </Div>\n        ) : null\n      }\n      placement=\"top\"\n    >\n      <NavButton\n        onClick={async () => {\n          if (!markdown) return;\n          await processPrompt({\n            contextualPromptSlug: item.slug,\n            showPromptAlert,\n            contextualContent: {\n              contextContent: markdown,\n              contextSelection: null,\n              context_projectRelativeFilePath: projectRelativeFilePath,\n            },\n          });\n\n          router.replace({\n            query: {\n              queryPath: router.query.queryPath,\n              variant: item.slug,\n            },\n          });\n        }}\n        title={item.title || item.name}\n      />\n    </Tooltip>\n  );\n}",
  "description": "",
  "id": "lbfksmtsjfrlorebfwsgikxm"
}