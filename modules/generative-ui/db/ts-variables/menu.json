{
  "createdAt": 1671317373746,
  "updatedAt": 1671317373746,
  "deletedAt": 0,
  "createdFirstAt": 1671317373746,
  "classification": "const",
  "comments": [],
  "isExported": true,
  "name": "Menu",
  "slug": "menu",
  "operationRelativeTypescriptFilePath": "src/components/Menu.tsx",
  "type": {
    "rawType": "(props: { notFound?: boolean | undefined; projectRelativeFilePath?: string | undefined; folderPath?: string | undefined; filename?: string | undefined; isFolder?: boolean | undefined; navigation?: import(\"/Users/king/King/operations/tools/ai/ai-types/build/ReaderProps\").FolderContent[] | undefined; contextualPromptsObject?: any; fileContextualPromptResults: import(\"/Users/king/King/operations/tools/ai/ai-types/build/ContextualPromptResult\").ContextualPromptResult[] | undefined; thePrompts: import(\"/Users/king/King/operations/tools/ai/ai-types/build/ContextualPrompt\").ContextualPrompt[]; selectionContextualPromptResults: import(\"/Users/king/King/operations/tools/ai/ai-types/build/ContextualPromptResult\").ContextualPromptResult[] | undefined; }) => JSX.Element",
    "typeDefinition": {
      "type": "object",
      "properties": {},
      "optional": false
    },
    "typeCoverage": 0,
    "isArray": false,
    "isEnum": false,
    "isObject": true,
    "isPrimitive": false,
    "isEnumLiteral": false,
    "simplifiedSchema": {
      "properties": [],
      "type": "object"
    }
  },
  "value": "(props: {\n  notFound?: boolean;\n  projectRelativeFilePath?: string;\n  folderPath?: string;\n  filename?: string;\n  isFolder?: boolean;\n  navigation?: FolderContent[];\n  contextualPromptsObject?: Omit<\n    ContextualPromptsObject,\n    \"databaseContextualPromptSlugs\"\n  > | null;\n  fileContextualPromptResults: ContextualPromptResult[] | undefined;\n  thePrompts: ContextualPrompt[];\n  selectionContextualPromptResults: ContextualPromptResult[] | undefined;\n}) => {\n  const {\n    isFolder,\n    navigation,\n    folderPath,\n    filename,\n    contextualPromptsObject,\n    fileContextualPromptResults,\n    selectionContextualPromptResults,\n    thePrompts,\n    notFound,\n  } = props;\n\n  const admin = useAdmin();\n  const basePath = process.env.NEXT_PUBLIC_BASEPATH;\n\n  const updateFrontmatter = async (\n    projectRelativePath: string | undefined,\n    newFrontmatter: { [key: string]: string }\n  ) => {\n    if (!projectRelativePath) return;\n\n    if (!basePath) return;\n\n    const apiResult = await api.updateFrontmatter({\n      projectRelativePath,\n      frontmatter: newFrontmatter,\n    });\n\n    showStandardResponse(apiResult);\n\n    if (apiResult.result?.isSuccessful) {\n      admin.refetch?.();\n    }\n  };\n\n  const alert = useAlert();\n  const { openContextMenuProps, renderContextMenu } = useContextMenu({\n    items: [\n      {\n        getTitle: () => \"🗑 Delete\",\n        onClick: (projectRelativePath) => {\n          if (!projectRelativePath) return;\n\n          if (!basePath) return;\n\n          const basePathRelative = makeRelative(projectRelativePath, basePath);\n          alert?.(\n            \"Are you sure?\",\n            `Do you want to delete ${basePathRelative}?`,\n            [\n              { style: \"cancel\", text: \"Cancel\" },\n              {\n                text: \"Delete\",\n                style: \"destructive\",\n                onPress: async () => {\n                  // delete also works, but trash seems better for now.\n                  const apiResult = await api.deleteFileOrFolder(\n                    projectRelativePath\n                  );\n\n                  showStandardResponse(apiResult);\n\n                  if (apiResult?.result?.isSuccessful) {\n                    admin.refetch?.();\n                  }\n                },\n              },\n            ]\n          );\n        },\n      },\n      {\n        getTitle: () => \"📣 Rename\",\n        onClick: async (projectRelativePath) => {\n          if (!projectRelativePath) return;\n          let newFilename = prompt(\n            \"What should the new name be?\",\n            getFileOrFolderName(projectRelativePath)\n          );\n          if (!newFilename) return;\n          const apiResult = await api.renameFileOrFolder(\n            projectRelativePath,\n            newFilename\n          );\n\n          showStandardResponse(apiResult);\n          if (apiResult?.result?.isSuccessful) {\n            admin.refetch?.();\n          }\n        },\n      },\n      {\n        getTitle: () => \"↩️ Move\",\n        onClick: async (projectRelativePath) => {\n          if (!projectRelativePath) return;\n\n          if (!basePath) return;\n\n          const basePathRelative = makeRelative(projectRelativePath, basePath);\n          let newLocation = prompt(\n            \"Where should this file/folder be moved to?\",\n            getFolderJs(basePathRelative)\n          );\n          if (!newLocation) return;\n\n          const apiResult = await api.movePath(\n            projectRelativePath,\n            basePath + \"/\" + newLocation\n          );\n\n          showStandardResponse(apiResult);\n          if (apiResult?.result?.isSuccessful) {\n            admin.refetch?.();\n          }\n        },\n      },\n\n      {\n        getTitle: () => \"👯‍♀️ Make a copy\",\n        onClick: async (projectRelativePath) => {\n          if (!projectRelativePath) return;\n\n          const apiResult = await api.copyPath(projectRelativePath);\n\n          showStandardResponse(apiResult);\n\n          if (apiResult?.result?.isSuccessful) {\n            admin.refetch?.();\n          }\n        },\n      },\n\n      {\n        getTitle: () => \"🔎 Open in Explorer\",\n        onClick: async (projectRelativePath) => {\n          if (!projectRelativePath) return;\n\n          if (!basePath) return;\n\n          const apiResult = await api.fileExplorerOpen(projectRelativePath);\n\n          showStandardResponse(apiResult);\n        },\n      },\n\n      {\n        getTitle: () => \"💻 Open in VSCode\",\n        onClick: async (projectRelativePath) => {\n          if (!projectRelativePath) return;\n\n          if (!basePath) return;\n\n          const apiResult = await api.vscodeOpen({\n            files: [{ projectRelativePath }],\n          });\n\n          showStandardResponse(apiResult);\n        },\n      },\n\n      {\n        getIsEnabled: (projectRelativePath) =>\n          navigation?.find((x) => x.projectRelativePath === projectRelativePath)\n            ?.authorizedGroup !== \"\",\n        getTitle: () => \"🕊 Make free\",\n        onClick: (path) => updateFrontmatter(path, { authorizedGroup: \"\" }),\n      },\n      {\n        getIsEnabled: (projectRelativePath) =>\n          navigation?.find((x) => x.projectRelativePath === projectRelativePath)\n            ?.authorizedGroup !== \"premium\",\n\n        getTitle: () => \"🏛 Make indie-only\",\n        onClick: (path) =>\n          updateFrontmatter(path, { authorizedGroup: \"premium\" }),\n      },\n\n      {\n        getIsEnabled: (projectRelativePath) =>\n          navigation?.find((x) => x.projectRelativePath === projectRelativePath)\n            ?.authorizedGroup !== \"enterprise\",\n        getTitle: () => \"🚀 Make startup-only\",\n        onClick: (path) =>\n          updateFrontmatter(path, { authorizedGroup: \"enterprise\" }),\n      },\n\n      {\n        getIsEnabled: (projectRelativePath) =>\n          !navigation?.find(\n            (x) => x.projectRelativePath === projectRelativePath\n          )?.isPrivate,\n        getTitle: () => \"🔑 Set private\",\n        onClick: (path) => updateFrontmatter(path, { isPrivate: \"true\" }),\n      },\n      {\n        getIsEnabled: (projectRelativePath) =>\n          navigation?.find((x) => x.projectRelativePath === projectRelativePath)\n            ?.isPrivate === true,\n        getTitle: () => \"🔑 Set public\",\n        onClick: (path) => updateFrontmatter(path, { isPrivate: \"false\" }),\n      },\n      {\n        getIsEnabled: (projectRelativePath) =>\n          navigation?.find((x) => x.projectRelativePath === projectRelativePath)\n            ?.isSecret !== true,\n        getTitle: () => \"🔒 Set secret\",\n        onClick: (path) => updateFrontmatter(path, { isSecret: \"true\" }),\n      },\n      {\n        getIsEnabled: (projectRelativePath) =>\n          navigation?.find((x) => x.projectRelativePath === projectRelativePath)\n            ?.isSecret === true,\n        getTitle: () => \"🔒 Set open\",\n        onClick: (path) => updateFrontmatter(path, { isSecret: \"false\" }),\n      },\n      {\n        getIsEnabled: (projectRelativePath) =>\n          navigation?.find((x) => x.projectRelativePath === projectRelativePath)\n            ?.isDraft !== true,\n        getTitle: () => \"🧪 Set draft\",\n        onClick: (path) => updateFrontmatter(path, { isDraft: \"true\" }),\n      },\n      {\n        getIsEnabled: (projectRelativePath) =>\n          navigation?.find((x) => x.projectRelativePath === projectRelativePath)\n            ?.isDraft === true,\n        getTitle: () => \"🧪 Set live\",\n        onClick: (path) => updateFrontmatter(path, { isDraft: \"false\" }),\n      },\n    ],\n  });\n\n  const router = useRouter();\n  const queryPath = router.asPath.slice(1);\n\n  const basePathRelativeFolderPath = notFound\n    ? \"/\"\n    : isFolder\n    ? queryPath\n    : (getFolderJs(queryPath) as string | undefined);\n\n  const folders = basePathRelativeFolderPath\n    ?.split(\"/\")\n    .filter((x) => !!x && x !== \"\");\n  const canGoBack = notFound\n    ? false\n    : queryPath.includes(\"/\") || (isFolder && queryPath !== \"\");\n\n  return (\n    <Div className=\"lg:w-48 lg:h-full lg:overflow-y-scroll\">\n      {renderContextMenu()}\n      <div className=\"flex sm:flex-row lg:flex-col flex-wrap lg:flex-nowrap\">\n        {/* root */}\n        {canGoBack ? <NavButton href={\"/README.md\"} title=\"🏠\" /> : null}\n        {folders?.map((folder, index, array) => {\n          const isActive =\n            index === array.length - 1 &&\n            (!filename || filename?.toLowerCase() === \"readme.md\");\n          const pathUntilHere = array.slice(0, index + 1).join(\"/\");\n          return (\n            <NavButton\n              isActive={isActive}\n              href={`/${pathUntilHere}`}\n              title={`⬆️ ${folder}`}\n            />\n          );\n        })}\n        {navigation?.map((navItem) => {\n          // if it's a file, we need to remove the name\n          const href = `${notFound ? \"\" : folderPath}/${navItem.name}${\n            navItem.type === \"folder\" && navItem.firstFile\n              ? `/${navItem.firstFile}`\n              : \"\"\n          }`;\n\n          const extraIcons = [\n            navItem.isDraft ? \"🧪\" : undefined,\n            navItem.isPrivate ? \"🔑\" : undefined,\n            navItem.isSecret ? \"🔒\" : undefined,\n            navItem.authorizedGroup === \"premium\"\n              ? \"🏛\"\n              : navItem.authorizedGroup === \"enterprise\"\n              ? \"🚀\"\n              : undefined,\n          ]\n            .filter(notEmpty)\n            .join(\"\");\n\n          const extension = navItem.name.split(\".\").pop()!;\n          const extensionIcons = {\n            ts: \"⌘\",\n            tsx: \"⌘\",\n            json: \"💿\",\n            md: \"📄\",\n          };\n          const icon =\n            navItem.type === \"file\"\n              ? Object.keys(extensionIcons).includes(extension)\n                ? extensionIcons[extension as keyof typeof extensionIcons]\n                : \"📄\"\n              : \"📂\";\n          const basePath = process.env.NEXT_PUBLIC_BASEPATH;\n          const projectRelativePath = `${basePath || \"\"}${\n            href.startsWith(\"/\") ? href : `/${href}`\n          }`;\n\n          return (\n            <NavButton\n              openContextMenuProps={\n                admin.isAdminActive ? openContextMenuProps : undefined\n              }\n              isActive={filename === navItem.name}\n              href={href}\n              id={projectRelativePath}\n              title={`${icon} ${navItem.name} ${extraIcons}`}\n            />\n          );\n        })}\n\n        {admin.isAdminActive ? (\n          <>\n            <NavButton\n              onClick={async () => {\n                if (!basePath) return;\n                let filename = prompt(\n                  \"What should be the name (including extension)?\",\n                  \"untitled.md\"\n                );\n                if (!filename || filename === \"\") return;\n\n                const projectRelativePath = `${basePath}/${basePathRelativeFolderPath}/${filename}`;\n\n                const apiResult = await api.newFile(projectRelativePath);\n\n                showStandardResponse(apiResult);\n\n                if (apiResult?.result?.isSuccessful) {\n                  admin.refetch?.();\n                }\n              }}\n              title=\"+ New file\"\n            />\n            <NavButton\n              onClick={async () => {\n                if (!basePath) return;\n                let folderName = prompt(\"What should be the name?\", \"\");\n                if (!folderName || folderName === \"\") return;\n\n                const projectRelativeBasePath = `${basePath}/${basePathRelativeFolderPath}`;\n\n                const apiResult = await api.newFolder(\n                  projectRelativeBasePath,\n                  folderName\n                );\n\n                showStandardResponse(apiResult);\n\n                if (apiResult?.result?.isSuccessful) {\n                  admin.refetch?.();\n                }\n              }}\n              title=\"+ New folder\"\n            />\n          </>\n        ) : null}\n      </div>\n\n      {admin.isAdminActive ? (\n        <Div className=\"mx-2\">\n          <P>\n            selectionResults: {selectionContextualPromptResults?.length || 0}\n          </P>\n          <P>fileResults: {fileContextualPromptResults?.length || 0}</P>\n          <P>\n            {isFolder ? \"folderPrompts\" : \"pagePrompts\"}: {thePrompts.length},\n            selectionPrompts:{\" \"}\n            {contextualPromptsObject?.selectionContextualPrompts.length || 0}\n          </P>\n          <div\n            className=\"cursor-pointer\"\n            onClick={async () => {\n              const apiResult = await api.removeAllFake(\n                process.env.NEXT_PUBLIC_BASEPATH\n              );\n              showStandardResponse(apiResult);\n            }}\n          >\n            Delete all fake results\n          </div>\n        </Div>\n      ) : null}\n    </Div>\n  );\n}",
  "description": "",
  "id": "juudfymradoebfvvredlmixk"
}